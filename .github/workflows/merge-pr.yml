name: Auto Merge Pull Requests
on:
  schedule:
    - cron: "0,30 * * * *"  # 每半小时运行一次
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  auto_merge:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN || github.token }}

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Enhanced Auto-merge with PAT
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN || github.token }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || github.token }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN || github.token }}
          script: |
            const currentWorkflow = context.workflow;
            console.log(`🔧 Current workflow: ${currentWorkflow}`);
            console.log(`🔑 Using enhanced token: ${process.env.GH_TOKEN ? 'PAT' : 'GITHUB_TOKEN'}`);
            
            // 获取所有开放的 PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            if (prs.length === 0) {
              console.log('ℹ️ No open pull requests found.');
              return;
            }
            
            console.log(`📋 Found ${prs.length} open PR(s)`);
            
            for (const pr of prs) {
              console.log('================================================');
              console.log(`🔄 Processing PR #${pr.number}: ${pr.title}`);
              console.log(`👤 Author: ${pr.user.login}`);
              console.log(`🌿 Branch: ${pr.head.ref} → ${pr.base.ref}`);
              console.log(`🔗 URL: ${pr.html_url}`);
              
              // 判断是否为自动化 PR
              const isAutomatedPR = 
                pr.user.login.includes('bot') ||
                pr.user.login === 'xuqssq' ||
                pr.title.includes('🤖') ||
                pr.title.includes('Automated') ||
                pr.title.toLowerCase().includes('auto') ||
                pr.head.ref.includes('auto-update');
              
              console.log(`🤖 Automated PR detected: ${isAutomatedPR}`);
              
              // 获取检查状态
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // 定义要忽略的自引用检查
              const selfReferenceChecks = [
                'auto_merge',
                'Auto Merge Pull Requests',
                'auto-merge-pr',
                'merge-pr'
              ];
              
              // 对于自动化 PR，使用智能过滤
              const relevantChecks = isAutomatedPR ? 
                checkRuns.check_runs.filter(check => 
                  !selfReferenceChecks.some(ref => 
                    check.name.toLowerCase().includes(ref.toLowerCase())
                  )
                ) : checkRuns.check_runs;
              
              const failedChecks = relevantChecks.filter(check => 
                ['failure', 'error', 'cancelled'].includes(check.conclusion)
              );
              
              console.log(`📊 Status Summary:`);
              console.log(`   • Total checks: ${checkRuns.check_runs.length}`);
              console.log(`   • Relevant checks: ${relevantChecks.length}`);
              console.log(`   • Failed relevant checks: ${failedChecks.length}`);
              
              // 获取 PR 详情
              const { data: prDetail } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              // 增强的合并条件检查
              const canMerge = 
                (prDetail.mergeable === true || prDetail.mergeable === null) &&
                !prDetail.draft &&
                prDetail.mergeable_state !== 'dirty' &&
                failedChecks.length === 0;
              
              console.log(`🎯 Merge Decision: ${canMerge ? 'MERGE' : 'WAIT'}`);
              
              if (canMerge) {
                console.log(`✅ Attempting to merge PR #${pr.number}...`);
                
                try {
                  // 首先尝试使用 REST API 合并
                  const mergeResult = await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    commit_title: `${pr.title} (#${pr.number})`,
                    commit_message: `Auto-merged: ${isAutomatedPR ? 'automated update' : 'all checks passed'}`,
                    merge_method: 'squash'
                  });
                  
                  console.log(`🎉 Successfully merged PR #${pr.number}`);
                  console.log(`📝 Merge SHA: ${mergeResult.data.sha}`);
                  
                  // 尝试删除分支
                  if (pr.head.repo.full_name === pr.base.repo.full_name) {
                    try {
                      await github.rest.git.deleteRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: `heads/${pr.head.ref}`
                      });
                      console.log(`🗑️ Successfully deleted branch: ${pr.head.ref}`);
                    } catch (deleteError) {
                      console.log(`⚠️ Could not delete branch: ${deleteError.message}`);
                    }
                  }
                  
                } catch (mergeError) {
                  console.log(`❌ REST API merge failed: ${mergeError.message}`);
                  
                  // 权限相关错误的详细处理
                  if (mergeError.message.includes('Resource not accessible')) {
                    console.log('🔑 This appears to be a permissions issue');
                    console.log('💡 Solutions:');
                    console.log('   1. Add a Personal Access Token (PAT) with repo permissions');
                    console.log('   2. Check if the repository has branch protection rules');
                    console.log('   3. Ensure the token has workflow permissions');
                    
                    // 尝试获取更多权限信息
                    try {
                      const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        username: context.actor
                      });
                      console.log(`👤 Current user permissions: ${permissions.permission}`);
                    } catch (permError) {
                      console.log('❌ Could not check user permissions');
                    }
                  }
                  
                  // 如果是权限问题，尝试使用 gh CLI（如果可用）
                  console.log('🔄 Attempting fallback merge with gh CLI...');
                  // 这部分需要在 shell 步骤中执行
                }
                
              } else {
                console.log(`⏸️ PR #${pr.number} is not ready for merge`);
                
                if (prDetail.mergeable === false) {
                  console.log('   🔴 Merge conflicts detected');
                }
                if (prDetail.draft) {
                  console.log('   🔴 PR is in draft mode');
                }
                if (failedChecks.length > 0) {
                  console.log('   🔴 Critical checks failing');
                }
              }
              
              console.log('================================================');
            }
            
            console.log('🏁 Auto-merge process completed');

      - name: Fallback Merge with gh CLI
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN || github.token }}
        run: |
          echo "🔄 Attempting fallback merge using gh CLI..."
          
          # 获取所有开放的 PR
          prs=$(gh pr list --state open --json number,title,mergeable --limit 100)
          
          if [[ "$prs" == "[]" ]]; then
            echo "ℹ️ No open PRs found for fallback merge"
            exit 0
          fi
          
          # 尝试合并自动化 PR
          echo "$prs" | jq -c '.[] | select(.title | contains("🤖") or contains("Automated"))' | while read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            
            echo "🔄 Attempting gh CLI merge for PR #$pr_number: $pr_title"
            
            # 使用 gh pr merge 命令
            if gh pr merge $pr_number --squash --delete-branch --body "Auto-merged via fallback CLI method"; then
              echo "🎉 Successfully merged PR #$pr_number using gh CLI"
            else
              echo "❌ gh CLI merge also failed for PR #$pr_number"
            fi
          done
