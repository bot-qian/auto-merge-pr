name: Auto Run Script and Create PR
on:
  schedule:
    - cron: "0 2 * * *" # 每天凌晨2点运行
  workflow_dispatch: # 支持手动触发

jobs:
  run_script_and_create_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          # 使用 yarn 缓存
          cache: "yarn"

      - name: Setup Yarn
        run: |
          # 确保使用最新的 Yarn
          corepack enable
          yarn --version

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies with Yarn..."
          if [ -f yarn.lock ]; then
            echo "✅ Found yarn.lock, using Yarn"
            yarn install --frozen-lockfile
          elif [ -f package.json ]; then
            echo "⚠️ No yarn.lock found, creating one"
            yarn install
          else
            echo "❌ No package.json found"
            exit 1
          fi

      - name: Verify script exists
        run: |
          if [ ! -f "scripts/commit.js" ]; then
            echo "❌ Script scripts/commit.js not found!"
            exit 1
          fi
          echo "✅ Script file exists"

      - name: Set up Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Run commit script and create PR
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          TARGET_REPO: "bot-qian/auto-merge-pr" # 目标仓库
        run: |
          echo "🚀 Starting automated script execution and PR creation..."

          # 生成唯一的分支名
          timestamp=$(date +%Y%m%d-%H%M%S)
          random_suffix=$(openssl rand -hex 3)
          branch_name="auto-update-${timestamp}-${random_suffix}"

          echo "📝 Running commit script..."
          
          # 记录执行前的状态
          echo "📋 Files before script execution:"
          git status --porcelain
          
          # 运行您的脚本，添加超时保护
          if timeout 300 node scripts/commit.js; then
            echo "✅ Script executed successfully"
          else
            echo "❌ Script execution failed or timed out"
            exit 1
          fi

          # 记录执行后的状态
          echo "📋 Files after script execution:"
          git status --porcelain

          # 检查是否有文件变更
          changes=$(git status --porcelain)
          if [[ -n "$changes" ]]; then
            echo "📁 Changes detected, proceeding with PR creation..."
            
            # 显示变更详情
            echo "📊 Changed files:"
            echo "$changes"
            
            # 切换到新分支
            git checkout -b $branch_name
            
            # 添加变更 - 您可以根据需要修改这里
            git add ./images
            
            # 检查是否有已暂存的文件
            staged_files=$(git diff --cached --name-only)
            if [[ -z "$staged_files" ]]; then
              echo "⚠️ No files were staged for commit"
              echo "Adding all changes..."
              git add .
            fi
            
            # 统计变更
            added_files=$(git diff --cached --name-only --diff-filter=A | wc -l)
            modified_files=$(git diff --cached --name-only --diff-filter=M | wc -l)
            deleted_files=$(git diff --cached --name-only --diff-filter=D | wc -l)
            
            # 提交变更
            commit_message="🤖 chore: automated update - $(date '+%Y-%m-%d %H:%M:%S')

          📊 Changes:
          • Added: ${added_files} files
          • Modified: ${modified_files} files
          • Deleted: ${deleted_files} files
          
          🔧 Generated by: scripts/commit.js
          📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')
          🏃 Workflow: ${{ github.workflow }}
          🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            git commit -m "$commit_message"
            
            # 推送分支到远程
            echo "⬆️ Pushing branch to origin..."
            git push origin $branch_name
            
            # 等待分支同步
            sleep 3
            
            # 创建 Pull Request
            pr_title="🤖 Automated Update - $(date '+%Y-%m-%d %H:%M')"
            pr_body="## 🤖 Automated Update Report

          **Generated:** $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Workflow:** [\`${{ github.workflow }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})  
          **Repository:** ${{ github.repository }}

          ### 📊 Changes Summary
          - **Added Files:** ${added_files}
          - **Modified Files:** ${modified_files}
          - **Deleted Files:** ${deleted_files}

          ### 🔧 Executed Scripts
          - \`node scripts/commit.js\`

          ### 📝 Changed Files
          \`\`\`
          $changes
          \`\`\`

          ### 🚀 Auto-Merge Configuration
          This PR is configured for automatic merging when all checks pass.

          ---
          *This PR was automatically generated by [GitHub Actions](${{ github.server_url }}/${{ github.repository }}) 🚀*"
            
            echo "📝 Creating Pull Request..."
            
            # 创建PR（不添加标签）
            pr_url=$(gh pr create \
              --repo "$TARGET_REPO" \
              --base main \
              --head "${{ github.repository_owner }}:$branch_name" \
              --title "$pr_title" \
              --body "$pr_body")
            
            if [[ -n "$pr_url" ]]; then
              echo "✅ Pull Request created: $pr_url"
              
              # 提取PR号码
              pr_number=$(echo "$pr_url" | grep -o '[0-9]*$')
              echo "📋 PR Number: #$pr_number"
              
              # 等待GitHub处理PR
              echo "⏳ Waiting for GitHub to process the PR..."
              sleep 10
              
              # 检查目标仓库是否有可用的标签，并尝试添加
              echo "🏷️ Checking available labels..."
              available_labels=$(gh label list --repo "$TARGET_REPO" --json name -q '.[].name' | tr '\n' ' ')
              echo "Available labels: $available_labels"
              
              # 尝试添加标签（如果存在）
              if echo "$available_labels" | grep -q "auto-merge"; then
                echo "Adding auto-merge label..."
                gh pr edit $pr_number --add-label "auto-merge" --repo "$TARGET_REPO" || echo "⚠️ Could not add auto-merge label"
              fi
              
              if echo "$available_labels" | grep -q "automated"; then
                echo "Adding automated label..."
                gh pr edit $pr_number --add-label "automated" --repo "$TARGET_REPO" || echo "⚠️ Could not add automated label"
              fi
              
              if echo "$available_labels" | grep -q "bot-generated"; then
                echo "Adding bot-generated label..."
                gh pr edit $pr_number --add-label "bot-generated" --repo "$TARGET_REPO" || echo "⚠️ Could not add bot-generated label"
              fi
              
              # 尝试启用auto-merge
              echo "🔄 Attempting to enable auto-merge..."
              if gh pr merge $pr_number --auto --squash --repo "$TARGET_REPO"; then
                echo "✅ Auto-merge enabled successfully!"
                echo "🎯 PR will be merged automatically when all checks pass"
              else
                echo "⚠️ Could not enable auto-merge"
                echo "💡 This might be because:"
                echo "   • Repository doesn't have auto-merge enabled"
                echo "   • PR requires manual review"
                echo "   • Branch protection rules require admin approval"
                echo "   • Auto-merge feature is not available for this repository"
              fi
              
              # 检查最终的auto-merge状态
              echo "🔍 Checking auto-merge status..."
              auto_merge_status=$(gh pr view $pr_number --repo "$TARGET_REPO" --json autoMergeRequest -q '.autoMergeRequest')
              if [[ "$auto_merge_status" != "null" ]]; then
                auto_merge_enabled="✅"
              else
                auto_merge_enabled="❌"
              fi
              
              # 输出最终状态
              echo "🎉 Automation completed successfully!"
              echo "📊 Summary:"
              echo "   • Script executed: ✅"
              echo "   • Changes committed: ✅"
              echo "   • PR created: ✅"
              echo "   • Auto-merge: $auto_merge_enabled"
              echo "   • PR URL: $pr_url"
              
            else
              echo "❌ Failed to create Pull Request"
              exit 1
            fi
            
          else
            echo "ℹ️ No changes detected after running script"
            echo "🔍 Possible reasons:"
            echo "   • Script didn't modify any files"
            echo "   • All changes were already committed"
            echo "   • Script ran but produced no output"
            echo "💡 This is normal and not an error"
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "🧹 Cleaning up on failure..."
          # 删除可能创建的本地分支
          current_branch=$(git branch --show-current)
          if [[ "$current_branch" == auto-update-* ]]; then
            git checkout main
            git branch -D "$current_branch" || true
          fi
          
          # 删除远程分支（如果存在）
          if git ls-remote --heads origin | grep -q "auto-update-"; then
            remote_branches=$(git ls-remote --heads origin | grep "auto-update-" | awk '{print $2}' | sed 's|refs/heads/||')
            for branch in $remote_branches; do
              git push origin --delete "$branch" || true
            done
          fi
